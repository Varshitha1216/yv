class Solution {
public:
    int minInsertions(string s) {
        int n = s.size();
        // dp[i][j] = length of longest palindromic subsequence in s[i..j]
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        // Base case: single characters are palindrome of length 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        // Fill dp for substrings of length 2 to n
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = 2 + (length == 2 ? 0 : dp[i+1][j-1]);
                } else {
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        
        int lps = dp[0][n-1];
        return n - lps;
    }
};
