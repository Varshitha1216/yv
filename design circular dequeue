class MyCircularDeque {
private:
    vector<int> data;
    int frontIdx, rearIdx, capacity, size;

public:
    MyCircularDeque(int k) {
        capacity = k;
        data.resize(k);
        frontIdx = 0;
        rearIdx = k - 1;
        size = 0;
    }
    
    bool insertFront(int value) {
        if (isFull()) return false;
        frontIdx = (frontIdx - 1 + capacity) % capacity;
        data[frontIdx] = value;
        size++;
        return true;
    }
    
    bool insertLast(int value) {
        if (isFull()) return false;
        rearIdx = (rearIdx + 1) % capacity;
        data[rearIdx] = value;
        size++;
        return true;
    }
    
    bool deleteFront() {
        if (isEmpty()) return false;
        frontIdx = (frontIdx + 1) % capacity;
        size--;
        return true;
    }
    
    bool deleteLast() {
        if (isEmpty()) return false;
        rearIdx = (rearIdx - 1 + capacity) % capacity;
        size--;
        return true;
    }
    
    int getFront() {
        if (isEmpty()) return -1;
        return data[frontIdx];
    }
    
    int getRear() {
        if (isEmpty()) return -1;
        return data[rearIdx];
    }
    
    bool isEmpty() {
        return size == 0;
    }
    
    bool isFull() {
        return size == capacity;
    }
};
